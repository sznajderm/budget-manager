name: Pull Request Validation

on:
  pull_request:
    branches: [master]

jobs:
  # lint:
  #   name: Lint Code
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v6
  #       with:
  #         node-version-file: '.nvmrc'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run linter
  #       run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    # needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v5
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    # needs: lint
    environment: integration
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENROUTER_DEFAULT_MODEL: ${{ secrets.OPENROUTER_DEFAULT_MODEL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test results XML
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-junit
          path: test-results/junit.xml
          retention-days: 7

  status-comment:
    name: Post Status Comment
    runs-on: ubuntu-latest
    needs: [unit-test, e2e-test]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: Download unit test coverage
        uses: actions/download-artifact@v6
        with:
          name: unit-test-coverage
          path: coverage/
        continue-on-error: true

      - name: Download E2E test results
        uses: actions/download-artifact@v6
        with:
          name: playwright-junit
          path: test-results/
        continue-on-error: true

      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.unit-test.result }}" == "success" && "${{ needs.e2e-test.result }}" == "success" ]]; then
            echo "status=‚úÖ All checks passed!" >> $GITHUB_OUTPUT
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå Some checks failed" >> $GITHUB_OUTPUT
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const unitTestStatus = '${{ needs.unit-test.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const e2eTestStatus = '${{ needs.e2e-test.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            
            let coverageInfo = '';
            try {
              const coverageSummary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverageSummary.total;
              coverageInfo = `
            ### üìä Coverage Summary
            - **Lines**: ${total.lines.pct}%
            - **Statements**: ${total.statements.pct}%
            - **Functions**: ${total.functions.pct}%
            - **Branches**: ${total.branches.pct}%
            `;
            } catch (error) {
              coverageInfo = '\n_Coverage data not available_';
            }

            const comment = `## ${{ steps.status.outputs.emoji }} PR Validation Results

            ### Job Status
            | Job | Status |
            |-----|--------|
            | Unit Tests | ${unitTestStatus} |
            | E2E Tests | ${e2eTestStatus} |

            ${coverageInfo}

            **Overall Status**: ${{ steps.status.outputs.status }}

            ---
            _Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})_
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
